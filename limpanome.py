#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

def excluir_arquivo(caminho_completo):
    """
    Exclui um arquivo que cont√©m underscore ou espa√ßo no nome
    """
    nome_arquivo = os.path.basename(caminho_completo)
    
    try:
        os.remove(caminho_completo)
        print(f"‚úÖ Exclu√≠do: '{nome_arquivo}'")
        return True
        
    except PermissionError:
        print(f"‚ùå ERRO: Sem permiss√£o para excluir '{nome_arquivo}'")
        return False
    except Exception as e:
        print(f"‚ùå ERRO ao excluir '{nome_arquivo}': {e}")
        return False

def processar_pasta(caminho_pasta):
    """
    Processa recursivamente todos os arquivos da pasta
    """
    if not os.path.exists(caminho_pasta):
        print(f"‚ùå ERRO: A pasta '{caminho_pasta}' n√£o existe!")
        return
    
    if not os.path.isdir(caminho_pasta):
        print(f"‚ùå ERRO: '{caminho_pasta}' n√£o √© uma pasta!")
        return
    
    print(f"\nüîç Processando pasta: {caminho_pasta}")
    print("=" * 60)
    
    total_excluidos = 0
    
    # Lista para armazenar todos os arquivos a excluir
    arquivos_para_excluir = []
    
    # Percorre a √°rvore de diret√≥rios
    for root, dirs, files in os.walk(caminho_pasta):
        # Adiciona arquivos com underscore ou espa√ßo √† lista
        for arquivo in files:
            if '_' in arquivo or ' ' in arquivo:
                caminho_completo = os.path.join(root, arquivo)
                arquivos_para_excluir.append(caminho_completo)
    
    # Processa arquivos
    if arquivos_para_excluir:
        print(f"\nüìÑ Encontrados {len(arquivos_para_excluir)} arquivo(s) com underscore (_) ou espa√ßo ( ):")
        print("\nLista de arquivos que ser√£o exclu√≠dos:")
        for arquivo in arquivos_para_excluir:
            nome = os.path.basename(arquivo)
            # Indica o motivo da exclus√£o
            marcadores = []
            if '_' in nome:
                marcadores.append('_')
            if ' ' in nome:
                marcadores.append('espa√ßo')
            motivo = f"[{', '.join(marcadores)}]"
            print(f"  - {nome} {motivo}")
        
        # Confirma√ß√£o adicional antes de excluir
        print(f"\n‚ö†Ô∏è  ATEN√á√ÉO: {len(arquivos_para_excluir)} arquivo(s) ser√£o PERMANENTEMENTE exclu√≠dos!")
        print("\nüóëÔ∏è  Excluindo arquivos...")
        for arquivo in arquivos_para_excluir:
            if excluir_arquivo(arquivo):
                total_excluidos += 1
    else:
        print("‚ÑπÔ∏è  Nenhum arquivo com underscore (_) ou espa√ßo ( ) foi encontrado.")
    
    # Resumo final
    print("\n" + "=" * 60)
    if total_excluidos > 0:
        print(f"‚úÖ CONCLU√çDO: {total_excluidos} arquivo(s) exclu√≠do(s) com sucesso!")
    else:
        print("‚ÑπÔ∏è  Nenhum arquivo foi exclu√≠do.")

def main():
    # Caminho da pasta a processar
    caminho = r'./img_base_captcha'
    
    print("üöÄ SCRIPT DE EXCLUS√ÉO DE ARQUIVOS COM UNDERSCORE OU ESPA√áO")
    print("=" * 60)
    print(f"Pasta alvo: {caminho}")
    
    # Aviso importante
    print("\n" + "‚ö†Ô∏è " * 10)
    print("AVISO IMPORTANTE: Este script ir√° EXCLUIR PERMANENTEMENTE")
    print("todos os arquivos que cont√™m underscore (_) OU espa√ßo ( ) no nome!")
    print("Esta a√ß√£o N√ÉO PODE ser desfeita!")
    print("‚ö†Ô∏è " * 10)
    
    # Confirma√ß√£o do usu√°rio
    resposta = input("\nDeseja continuar? (s/n): ")
    
    if resposta.lower() in ['s', 'sim', 'yes', 'y']:
        processar_pasta(caminho)
    else:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        sys.exit(0)
    
    print("\nüèÅ Script finalizado!")
    input("\nPressione ENTER para sair...")

if __name__ == "__main__":
    main()